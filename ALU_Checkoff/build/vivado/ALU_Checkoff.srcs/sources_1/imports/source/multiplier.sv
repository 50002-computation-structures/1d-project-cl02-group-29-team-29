/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module multiplier #(
        parameter WIDTH = 6'h20
    ) (
        input wire [(WIDTH)-1:0] a,
        input wire [(WIDTH)-1:0] b,
        output reg [(WIDTH)-1:0] mul
    );
    logic [31:0] R_726f4741_i;
    logic [31:0] RR_726f4741_i;
    logic [31:0] R_6ae0c6fb_j;
    logic [31:0] RR_6ae0c6fb_j;
    logic [31:0] R_5c3ec566_i;
    logic [31:0] RR_5c3ec566_i;
    logic [(WIDTH)-1:0][(WIDTH)-1:0] partial_sum;
    logic [(WIDTH)-1:0][(WIDTH)-1:0] shifted_bits;
    logic [(WIDTH)-1:0] sum;
    logic [(WIDTH)-1:0] carry;
    localparam _MP_SIZE_509228260 = 6'h20;
    logic [(WIDTH)-1:0][31:0] M_rca_a;
    logic [(WIDTH)-1:0][31:0] M_rca_b;
    logic [(WIDTH)-1:0] M_rca_cin;
    logic [(WIDTH)-1:0][31:0] M_rca_s;
    logic [(WIDTH)-1:0] M_rca_cout;
    
    genvar idx_0_509228260;
    
    generate
        for (idx_0_509228260 = 0; idx_0_509228260 < WIDTH; idx_0_509228260 = idx_0_509228260 + 1) begin: forLoop_idx_0_509228260
            rca #(
                .SIZE(_MP_SIZE_509228260)
            ) rca (
                .a(M_rca_a[idx_0_509228260]),
                .b(M_rca_b[idx_0_509228260]),
                .cin(M_rca_cin[idx_0_509228260]),
                .s(M_rca_s[idx_0_509228260]),
                .cout(M_rca_cout[idx_0_509228260])
            );
        end
    endgenerate
    
    
    logic [(WIDTH)-1:0] negated;
    always @* begin
        negated = 32'h0;
        for (RR_726f4741_i = 0; RR_726f4741_i < WIDTH; RR_726f4741_i = RR_726f4741_i + 1) begin
      R_726f4741_i = (0) + RR_726f4741_i * (1);
            for (RR_6ae0c6fb_j = 0; RR_6ae0c6fb_j < WIDTH; RR_6ae0c6fb_j = RR_6ae0c6fb_j + 1) begin
        R_6ae0c6fb_j = (0) + RR_6ae0c6fb_j * (1);
                shifted_bits[R_726f4741_i] = 32'h0;
                partial_sum[R_726f4741_i][R_6ae0c6fb_j] = a[R_6ae0c6fb_j] & b[R_726f4741_i];
            end
        end
        sum = partial_sum[1'h0];
        carry = 1'h0;
        M_rca_a[1'h0] = sum;
        M_rca_b[1'h0] = 1'h0;
        M_rca_cin = 1'h0;
        for (RR_5c3ec566_i = 0; RR_5c3ec566_i < WIDTH - 1'h1; RR_5c3ec566_i = RR_5c3ec566_i + 1) begin
      R_5c3ec566_i = (0) + RR_5c3ec566_i * (1);
            if (R_5c3ec566_i != WIDTH - 1'h1) begin
                shifted_bits[R_5c3ec566_i + 1'h1] = partial_sum[R_5c3ec566_i + 1'h1] << (R_5c3ec566_i + 1'h1);
                M_rca_b[R_5c3ec566_i + 1'h1] = shifted_bits[R_5c3ec566_i + 1'h1];
            end else begin
                negated = partial_sum[R_5c3ec566_i + 1'h1] << (R_5c3ec566_i + 1'h1);
                M_rca_b[R_5c3ec566_i + 1'h1] = ~negated + 1'h1;
            end
            M_rca_a[R_5c3ec566_i + 1'h1] = M_rca_s[R_5c3ec566_i];
            sum = M_rca_s[R_5c3ec566_i + 1'h1];
            carry = M_rca_cout[R_5c3ec566_i + 1'h1];
        end
        mul = sum;
    end
    
    
endmodule