/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_4a53ae13_i;
    logic [31:0] RR_4a53ae13_i;
    logic [31:0] R_60dfb1b0_i;
    logic [31:0] RR_60dfb1b0_i;
    logic [31:0] R_069ce5b1_i;
    logic [31:0] RR_069ce5b1_i;
    logic [31:0] R_52389e10_i;
    logic [31:0] RR_52389e10_i;
    logic [31:0] R_7536f3d5_i;
    logic [31:0] RR_7536f3d5_i;
    logic [31:0] R_2fc1f74c_i;
    logic [31:0] RR_2fc1f74c_i;
    logic [31:0] R_477a1fab_i;
    logic [31:0] RR_477a1fab_i;
    logic [31:0] R_07593be2_i;
    logic [31:0] RR_07593be2_i;
    logic [31:0] R_7f72c09e_i;
    logic [31:0] RR_7f72c09e_i;
    logic [31:0] R_7e6c6a6f_i;
    logic [31:0] RR_7e6c6a6f_i;
    logic [31:0] R_0cd33774_i;
    logic [31:0] RR_0cd33774_i;
    logic [31:0] R_25973c18_i;
    logic [31:0] RR_25973c18_i;
    logic [31:0] R_3ee9b680_i;
    logic [31:0] RR_3ee9b680_i;
    logic [31:0] R_73746ff0_i;
    logic [31:0] RR_73746ff0_i;
    logic [31:0] R_19a2d7c5_i;
    logic [31:0] RR_19a2d7c5_i;
    logic [31:0] R_6cdbe126_i;
    logic [31:0] RR_6cdbe126_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_766215376;
    
    generate
        for (idx_0_766215376 = 0; idx_0_766215376 < 32; idx_0_766215376 = idx_0_766215376 + 1) begin: forLoop_idx_0_766215376
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_766215376]),
                .in(M_left_mux1_in[idx_0_766215376]),
                .out(M_left_mux1_out[idx_0_766215376])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_1726167738;
    
    generate
        for (idx_0_1726167738 = 0; idx_0_1726167738 < 32; idx_0_1726167738 = idx_0_1726167738 + 1) begin: forLoop_idx_0_1726167738
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_1726167738]),
                .in(M_left_mux2_in[idx_0_1726167738]),
                .out(M_left_mux2_out[idx_0_1726167738])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_799485253;
    
    generate
        for (idx_0_799485253 = 0; idx_0_799485253 < 32; idx_0_799485253 = idx_0_799485253 + 1) begin: forLoop_idx_0_799485253
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_799485253]),
                .in(M_left_mux3_in[idx_0_799485253]),
                .out(M_left_mux3_out[idx_0_799485253])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_2063369032;
    
    generate
        for (idx_0_2063369032 = 0; idx_0_2063369032 < 32; idx_0_2063369032 = idx_0_2063369032 + 1) begin: forLoop_idx_0_2063369032
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_2063369032]),
                .in(M_left_mux4_in[idx_0_2063369032]),
                .out(M_left_mux4_out[idx_0_2063369032])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_801167458;
    
    generate
        for (idx_0_801167458 = 0; idx_0_801167458 < 32; idx_0_801167458 = idx_0_801167458 + 1) begin: forLoop_idx_0_801167458
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_801167458]),
                .in(M_left_mux5_in[idx_0_801167458]),
                .out(M_left_mux5_out[idx_0_801167458])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_1379335550;
    
    generate
        for (idx_0_1379335550 = 0; idx_0_1379335550 < 32; idx_0_1379335550 = idx_0_1379335550 + 1) begin: forLoop_idx_0_1379335550
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_1379335550]),
                .in(M_right_mux1_in[idx_0_1379335550]),
                .out(M_right_mux1_out[idx_0_1379335550])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_1707690272;
    
    generate
        for (idx_0_1707690272 = 0; idx_0_1707690272 < 32; idx_0_1707690272 = idx_0_1707690272 + 1) begin: forLoop_idx_0_1707690272
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_1707690272]),
                .in(M_right_mux2_in[idx_0_1707690272]),
                .out(M_right_mux2_out[idx_0_1707690272])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_977321398;
    
    generate
        for (idx_0_977321398 = 0; idx_0_977321398 < 32; idx_0_977321398 = idx_0_977321398 + 1) begin: forLoop_idx_0_977321398
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_977321398]),
                .in(M_right_mux3_in[idx_0_977321398]),
                .out(M_right_mux3_out[idx_0_977321398])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_1824883559;
    
    generate
        for (idx_0_1824883559 = 0; idx_0_1824883559 < 32; idx_0_1824883559 = idx_0_1824883559 + 1) begin: forLoop_idx_0_1824883559
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_1824883559]),
                .in(M_right_mux4_in[idx_0_1824883559]),
                .out(M_right_mux4_out[idx_0_1824883559])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_1738004402;
    
    generate
        for (idx_0_1738004402 = 0; idx_0_1738004402 < 32; idx_0_1738004402 = idx_0_1738004402 + 1) begin: forLoop_idx_0_1738004402
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_1738004402]),
                .in(M_right_mux5_in[idx_0_1738004402]),
                .out(M_right_mux5_out[idx_0_1738004402])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_1320659858;
    
    generate
        for (idx_0_1320659858 = 0; idx_0_1320659858 < 32; idx_0_1320659858 = idx_0_1320659858 + 1) begin: forLoop_idx_0_1320659858
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_1320659858]),
                .in(M_sra_mux1_in[idx_0_1320659858]),
                .out(M_sra_mux1_out[idx_0_1320659858])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_1621114771;
    
    generate
        for (idx_0_1621114771 = 0; idx_0_1621114771 < 32; idx_0_1621114771 = idx_0_1621114771 + 1) begin: forLoop_idx_0_1621114771
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_1621114771]),
                .in(M_sra_mux2_in[idx_0_1621114771]),
                .out(M_sra_mux2_out[idx_0_1621114771])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_687112140;
    
    generate
        for (idx_0_687112140 = 0; idx_0_687112140 < 32; idx_0_687112140 = idx_0_687112140 + 1) begin: forLoop_idx_0_687112140
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_687112140]),
                .in(M_sra_mux3_in[idx_0_687112140]),
                .out(M_sra_mux3_out[idx_0_687112140])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_80264063;
    
    generate
        for (idx_0_80264063 = 0; idx_0_80264063 < 32; idx_0_80264063 = idx_0_80264063 + 1) begin: forLoop_idx_0_80264063
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_80264063]),
                .in(M_sra_mux4_in[idx_0_80264063]),
                .out(M_sra_mux4_out[idx_0_80264063])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_1322623465;
    
    generate
        for (idx_0_1322623465 = 0; idx_0_1322623465 < 32; idx_0_1322623465 = idx_0_1322623465 + 1) begin: forLoop_idx_0_1322623465
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_1322623465]),
                .in(M_sra_mux5_in[idx_0_1322623465]),
                .out(M_sra_mux5_out[idx_0_1322623465])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_4a53ae13_i = 0; RR_4a53ae13_i < 6'h20; RR_4a53ae13_i = RR_4a53ae13_i + 1) begin
        R_4a53ae13_i = (0) + RR_4a53ae13_i * (1);
                M_left_mux1_in[R_4a53ae13_i][1'h0] = a[R_4a53ae13_i];
                if (R_4a53ae13_i < 5'h10) begin
                    M_left_mux1_in[R_4a53ae13_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_4a53ae13_i][1'h1] = a[R_4a53ae13_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_60dfb1b0_i = 0; RR_60dfb1b0_i < 6'h20; RR_60dfb1b0_i = RR_60dfb1b0_i + 1) begin
        R_60dfb1b0_i = (0) + RR_60dfb1b0_i * (1);
                M_left_mux2_in[R_60dfb1b0_i][1'h0] = w[R_60dfb1b0_i];
                if (R_60dfb1b0_i < 4'h8) begin
                    M_left_mux2_in[R_60dfb1b0_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_60dfb1b0_i][1'h1] = w[R_60dfb1b0_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_069ce5b1_i = 0; RR_069ce5b1_i < 6'h20; RR_069ce5b1_i = RR_069ce5b1_i + 1) begin
        R_069ce5b1_i = (0) + RR_069ce5b1_i * (1);
                M_left_mux3_in[R_069ce5b1_i][1'h0] = x[R_069ce5b1_i];
                if (R_069ce5b1_i < 3'h4) begin
                    M_left_mux3_in[R_069ce5b1_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_069ce5b1_i][1'h1] = x[R_069ce5b1_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_52389e10_i = 0; RR_52389e10_i < 6'h20; RR_52389e10_i = RR_52389e10_i + 1) begin
        R_52389e10_i = (0) + RR_52389e10_i * (1);
                M_left_mux4_in[R_52389e10_i][1'h0] = y[R_52389e10_i];
                if (R_52389e10_i < 2'h2) begin
                    M_left_mux4_in[R_52389e10_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_52389e10_i][1'h1] = y[R_52389e10_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_7536f3d5_i = 0; RR_7536f3d5_i < 6'h20; RR_7536f3d5_i = RR_7536f3d5_i + 1) begin
        R_7536f3d5_i = (0) + RR_7536f3d5_i * (1);
                M_left_mux5_in[R_7536f3d5_i][1'h0] = z[R_7536f3d5_i];
                if (R_7536f3d5_i < 1'h1) begin
                    M_left_mux5_in[R_7536f3d5_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_7536f3d5_i][1'h1] = z[R_7536f3d5_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_2fc1f74c_i = 0; RR_2fc1f74c_i < 6'h20; RR_2fc1f74c_i = RR_2fc1f74c_i + 1) begin
          R_2fc1f74c_i = (0) + RR_2fc1f74c_i * (1);
                    M_right_mux1_in[R_2fc1f74c_i][1'h0] = a[R_2fc1f74c_i];
                    if (R_2fc1f74c_i < 5'h10) begin
                        M_right_mux1_in[R_2fc1f74c_i][1'h1] = a[5'h10 + R_2fc1f74c_i];
                    end else begin
                        M_right_mux1_in[R_2fc1f74c_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_477a1fab_i = 0; RR_477a1fab_i < 6'h20; RR_477a1fab_i = RR_477a1fab_i + 1) begin
          R_477a1fab_i = (0) + RR_477a1fab_i * (1);
                    M_right_mux2_in[R_477a1fab_i][1'h0] = wr[R_477a1fab_i];
                    if (R_477a1fab_i < 5'h18) begin
                        M_right_mux2_in[R_477a1fab_i][1'h1] = wr[4'h8 + R_477a1fab_i];
                    end else begin
                        M_right_mux2_in[R_477a1fab_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_07593be2_i = 0; RR_07593be2_i < 6'h20; RR_07593be2_i = RR_07593be2_i + 1) begin
          R_07593be2_i = (0) + RR_07593be2_i * (1);
                    M_right_mux3_in[R_07593be2_i][1'h0] = xr[R_07593be2_i];
                    if (R_07593be2_i < 5'h1c) begin
                        M_right_mux3_in[R_07593be2_i][1'h1] = xr[3'h4 + R_07593be2_i];
                    end else begin
                        M_right_mux3_in[R_07593be2_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_7f72c09e_i = 0; RR_7f72c09e_i < 6'h20; RR_7f72c09e_i = RR_7f72c09e_i + 1) begin
          R_7f72c09e_i = (0) + RR_7f72c09e_i * (1);
                    M_right_mux4_in[R_7f72c09e_i][1'h0] = yr[R_7f72c09e_i];
                    if (R_7f72c09e_i < 5'h1e) begin
                        M_right_mux4_in[R_7f72c09e_i][1'h1] = yr[2'h2 + R_7f72c09e_i];
                    end else begin
                        M_right_mux4_in[R_7f72c09e_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_7e6c6a6f_i = 0; RR_7e6c6a6f_i < 6'h20; RR_7e6c6a6f_i = RR_7e6c6a6f_i + 1) begin
          R_7e6c6a6f_i = (0) + RR_7e6c6a6f_i * (1);
                    M_right_mux5_in[R_7e6c6a6f_i][1'h0] = zr[R_7e6c6a6f_i];
                    if (R_7e6c6a6f_i < 5'h1f) begin
                        M_right_mux5_in[R_7e6c6a6f_i][1'h1] = zr[1'h1 + R_7e6c6a6f_i];
                    end else begin
                        M_right_mux5_in[R_7e6c6a6f_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_0cd33774_i = 0; RR_0cd33774_i < 6'h20; RR_0cd33774_i = RR_0cd33774_i + 1) begin
            R_0cd33774_i = (0) + RR_0cd33774_i * (1);
                        M_sra_mux1_in[R_0cd33774_i][1'h0] = a[R_0cd33774_i];
                        if (R_0cd33774_i < 5'h10) begin
                            M_sra_mux1_in[R_0cd33774_i][1'h1] = a[5'h10 + R_0cd33774_i];
                        end else begin
                            M_sra_mux1_in[R_0cd33774_i][1'h1] = a[5'h1f];
                        end
                        wra[R_0cd33774_i] = M_sra_mux1_out[R_0cd33774_i];
                    end
                    for (RR_25973c18_i = 0; RR_25973c18_i < 6'h20; RR_25973c18_i = RR_25973c18_i + 1) begin
            R_25973c18_i = (0) + RR_25973c18_i * (1);
                        M_sra_mux2_in[R_25973c18_i][1'h0] = wra[R_25973c18_i];
                        if (R_25973c18_i < 5'h18) begin
                            M_sra_mux2_in[R_25973c18_i][1'h1] = wra[4'h8 + R_25973c18_i];
                        end else begin
                            M_sra_mux2_in[R_25973c18_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_25973c18_i] = b[2'h3];
                        xra[R_25973c18_i] = M_sra_mux2_out[R_25973c18_i];
                    end
                    for (RR_3ee9b680_i = 0; RR_3ee9b680_i < 6'h20; RR_3ee9b680_i = RR_3ee9b680_i + 1) begin
            R_3ee9b680_i = (0) + RR_3ee9b680_i * (1);
                        M_sra_mux3_in[R_3ee9b680_i][1'h0] = xra[R_3ee9b680_i];
                        if (R_3ee9b680_i < 5'h1c) begin
                            M_sra_mux3_in[R_3ee9b680_i][1'h1] = xra[3'h4 + R_3ee9b680_i];
                        end else begin
                            M_sra_mux3_in[R_3ee9b680_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_3ee9b680_i] = b[2'h2];
                        yra[R_3ee9b680_i] = M_sra_mux3_out[R_3ee9b680_i];
                    end
                    for (RR_73746ff0_i = 0; RR_73746ff0_i < 6'h20; RR_73746ff0_i = RR_73746ff0_i + 1) begin
            R_73746ff0_i = (0) + RR_73746ff0_i * (1);
                        M_sra_mux4_in[R_73746ff0_i][1'h0] = yra[R_73746ff0_i];
                        if (R_73746ff0_i < 5'h1e) begin
                            M_sra_mux4_in[R_73746ff0_i][1'h1] = yra[2'h2 + R_73746ff0_i];
                        end else begin
                            M_sra_mux4_in[R_73746ff0_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_73746ff0_i] = b[1'h1];
                        zra[R_73746ff0_i] = M_sra_mux4_out[R_73746ff0_i];
                    end
                    for (RR_19a2d7c5_i = 0; RR_19a2d7c5_i < 6'h20; RR_19a2d7c5_i = RR_19a2d7c5_i + 1) begin
            R_19a2d7c5_i = (0) + RR_19a2d7c5_i * (1);
                        M_sra_mux5_in[R_19a2d7c5_i][1'h0] = zra[R_19a2d7c5_i];
                        if (R_19a2d7c5_i < 5'h1f) begin
                            M_sra_mux5_in[R_19a2d7c5_i][1'h1] = zra[1'h1 + R_19a2d7c5_i];
                        end else begin
                            M_sra_mux5_in[R_19a2d7c5_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_19a2d7c5_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_6cdbe126_i = 0; RR_6cdbe126_i < 6'h20; RR_6cdbe126_i = RR_6cdbe126_i + 1) begin
      R_6cdbe126_i = (0) + RR_6cdbe126_i * (1);
            M_left_mux1_s0[R_6cdbe126_i] = b[3'h4];
            M_left_mux2_s0[R_6cdbe126_i] = b[2'h3];
            M_left_mux3_s0[R_6cdbe126_i] = b[2'h2];
            M_left_mux4_s0[R_6cdbe126_i] = b[1'h1];
            M_left_mux5_s0[R_6cdbe126_i] = b[1'h0];
            M_right_mux1_s0[R_6cdbe126_i] = b[3'h4];
            M_right_mux2_s0[R_6cdbe126_i] = b[2'h3];
            M_right_mux3_s0[R_6cdbe126_i] = b[2'h2];
            M_right_mux4_s0[R_6cdbe126_i] = b[1'h1];
            M_right_mux5_s0[R_6cdbe126_i] = b[1'h0];
            M_sra_mux1_s0[R_6cdbe126_i] = b[3'h4];
            M_sra_mux2_s0[R_6cdbe126_i] = b[2'h3];
            M_sra_mux3_s0[R_6cdbe126_i] = b[2'h2];
            M_sra_mux4_s0[R_6cdbe126_i] = b[1'h1];
            M_sra_mux5_s0[R_6cdbe126_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule