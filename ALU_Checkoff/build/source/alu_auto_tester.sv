/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_auto_tester (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [7:0] led
    );
    logic slow_clock;
    logic [69:0] current_inputs;
    logic [31:0] current_output;
    logic current_z;
    logic current_v;
    logic current_n;
    logic [34:0] correct_answer;
    logic correct_z;
    logic correct_v;
    logic correct_n;
    localparam SIZE = 6'h20;
    localparam SLOW_CLOCK_DEFAULT_SPEED = 5'h18;
    localparam CLK_FREQ = 24'h989680;
    localparam logic [43:0][69:0] INPUTS = {{70'h0, 70'h7fffffff00000001, 70'h80000000ffffffff, 70'h8000000080000000, 70'h10000000000000000, 70'h17fffffff00000001, 70'h18000000000000001, 70'h1800000007fffffff, 70'h20000000000000000, 70'h2000000017fffffff, 70'h28000000000000001, 70'h280000000ffffffff, 70'h1800000000ffffffff, 70'h18aaaaaaaa55555555, 70'h18ffffffffffffffff, 70'h180f0f0f0ff0f0f0f0, 70'h1e0000000000000000, 70'h1eaaaaaaaa55555555, 70'h1effffffff00000000, 70'h1e0f0f0f0ff0f0f0f0, 70'h1600000000ffffffff, 70'h16aaaaaaaa55555555, 70'h16ffffffffffffffff, 70'h160f0f0f0ff0f0f0f0, 70'h1a00000000ffffffff, 70'h1a7fffffff00000001, 70'h1a8000000000000001, 70'h1affffffff00000000, 70'h200000000100000001, 70'h20000000010000000f, 70'h20000000010000001f, 70'h208000000000000001, 70'h218000000000000001, 70'h210000000100000001, 70'h217fffffff0000000f, 70'h21ffffffff0000001f, 70'h238000000000000001, 70'h237fffffff0000000f, 70'h23ffffffff0000001f, 70'h230000000100000001, 70'h330000000000000000, 70'h337fffffff7fffffff, 70'h338000000000000001, 70'h33fffffffffffffffe}};
    localparam logic [43:0][34:0] ANSWER = {{35'h4, 35'h400000003, 35'h3fffffff8, 35'h6, 35'h4, 35'h3fffffff0, 35'h3fffffffa, 35'ha, 35'h4, 35'h3fffffff8, 35'h400000001, 35'h400000003, 35'h4, 35'h4, 35'h7fffffff9, 35'h4, 35'h4, 35'h7fffffff9, 35'h7fffffff9, 35'h7fffffff9, 35'h7fffffff9, 35'h7fffffff9, 35'h4, 35'h7fffffff9, 35'h4, 35'h3fffffff8, 35'h400000001, 35'h7fffffff9, 35'h10, 35'h40001, 35'h400000001, 35'h6, 35'h200000000, 35'h4, 35'h7fff8, 35'h8, 35'h600000001, 35'h7fff8, 35'h7fffffff9, 35'h4, 35'hc, 35'hc, 35'h4, 35'h4}};
    localparam E_States_IDLE = 3'h0;
    localparam E_States_AUTO_RUN = 3'h1;
    localparam E_States_NEXT = 3'h2;
    localparam E_States_BACK = 3'h3;
    localparam E_States_HALT = 3'h4;
    localparam _MP_RISE_562826448 = 1'h1;
    localparam _MP_FALL_562826448 = 1'h0;
    logic M_slow_clock_edge_in;
    logic M_slow_clock_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_562826448),
        .FALL(_MP_FALL_562826448)
    ) slow_clock_edge (
        .clk(clk),
        .in(M_slow_clock_edge_in),
        .out(M_slow_clock_edge_out)
    );
    
    
    localparam logic [4:0][0:0] _MP_RISE_415109776 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_415109776 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_415109776;
    
    generate
        for (idx_0_415109776 = 0; idx_0_415109776 < 5; idx_0_415109776 = idx_0_415109776 + 1) begin: forLoop_idx_0_415109776
            edge_detector #(
                .RISE(_MP_RISE_415109776[idx_0_415109776]),
                .FALL(_MP_FALL_415109776[idx_0_415109776])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_415109776]),
                .out(M_io_button_edge_out[idx_0_415109776])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][23:0] _MP_CLK_FREQ_921667751 = {{24'h989680, 24'h989680, 24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_921667751 = 5'h14;
    localparam _MP_NUM_SYNC_921667751 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_921667751;
    
    generate
        for (idx_0_921667751 = 0; idx_0_921667751 < 5; idx_0_921667751 = idx_0_921667751 + 1) begin: forLoop_idx_0_921667751
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_921667751[idx_0_921667751]),
                .MIN_DELAY(_MP_MIN_DELAY_921667751),
                .NUM_SYNC(_MP_NUM_SYNC_921667751)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_921667751]),
                .out(M_io_button_cond_out[idx_0_921667751])
            );
        end
    endgenerate
    
    
    logic [31:0] D_clock_counter_d, D_clock_counter_q = 0;
    logic [2:0] D_states_d, D_states_q = 3'h0;
    logic D_slow_clock_enable_d, D_slow_clock_enable_q = 1'h0;
    logic [7:0] D_test_index_d, D_test_index_q = 1'h0;
    logic [0:0] D_result_checker_d, D_result_checker_q = 1'h1;
    logic [15:0] D_high_16_d, D_high_16_q = 0;
    logic [15:0] D_low_16_d, D_low_16_q = 0;
    logic [0:0] D_toggle_display_d, D_toggle_display_q = 1'h0;
    logic [3:0] D_display_toggle_counter_d, D_display_toggle_counter_q = 1'h0;
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    always @* begin
        D_clock_counter_d = D_clock_counter_q;
        D_states_d = D_states_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        D_test_index_d = D_test_index_q;
        D_high_16_d = D_high_16_q;
        D_low_16_d = D_low_16_q;
        D_display_toggle_counter_d = D_display_toggle_counter_q;
        D_result_checker_d = D_result_checker_q;
        D_toggle_display_d = D_toggle_display_q;
        
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 1'h0;
        io_select = 4'hf;
        led = 1'h0;
        current_inputs = 1'h0;
        current_z = 1'h0;
        current_v = 1'h0;
        current_n = 1'h0;
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        D_clock_counter_d = D_clock_counter_q + 1'h1;
        D_states_d = D_states_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        D_test_index_d = D_test_index_q;
        D_high_16_d = D_high_16_q;
        D_low_16_d = D_low_16_q;
        D_display_toggle_counter_d = D_display_toggle_counter_q;
        D_result_checker_d = D_result_checker_q;
        slow_clock = D_clock_counter_q[5'h18];
        
        case (D_slow_clock_enable_q)
            1'h0: begin
                M_slow_clock_edge_in = 1'h0;
            end
            1'h1: begin
                M_slow_clock_edge_in = slow_clock;
            end
            default: begin
                M_slow_clock_edge_in = 1'h0;
            end
        endcase
        
        case (D_states_q)
            3'h0: begin
                if (M_io_button_edge_out[1'h1]) begin
                    D_slow_clock_enable_d = 1'h1;
                    D_states_d = 3'h1;
                end else begin
                    if (M_io_button_edge_out[1'h0]) begin
                        D_toggle_display_d = 1'h1;
                    end else begin
                        if (M_io_button_edge_out[2'h2]) begin
                            D_toggle_display_d = 1'h0;
                        end else begin
                            if (M_io_button_edge_out[2'h3]) begin
                                D_states_d = 3'h3;
                            end else begin
                                if (M_io_button_edge_out[3'h4]) begin
                                    D_states_d = 3'h2;
                                end
                            end
                        end
                    end
                end
            end
            3'h1: begin
                if (D_result_checker_q == 1'h0) begin
                    if (D_slow_clock_enable_q) begin
                        D_states_d = 3'h4;
                    end
                end else begin
                    if (M_slow_clock_edge_out) begin
                        if (io_dip[2'h2][3'h7]) begin
                            D_states_d = 3'h4;
                        end else begin
                            if (D_display_toggle_counter_q < 3'h4) begin
                                D_display_toggle_counter_d = D_display_toggle_counter_q + 1'h1;
                            end else begin
                                D_states_d = 3'h2;
                            end
                        end
                    end else begin
                        if (M_io_button_edge_out[1'h1]) begin
                            D_slow_clock_enable_d = 1'h0;
                            D_states_d = 3'h0;
                        end
                    end
                end
            end
            3'h2: begin
                if (D_test_index_q + 1'h1 >= 6'h2c) begin
                    D_test_index_d = 6'h2c;
                end else begin
                    D_test_index_d = D_test_index_q + 1'h1;
                end
                D_display_toggle_counter_d = 1'h0;
                if (D_slow_clock_enable_q == 1'h0) begin
                    D_states_d = 3'h0;
                end else begin
                    if (D_slow_clock_enable_q == 1'h1) begin
                        D_states_d = 3'h1;
                    end
                end
            end
            3'h3: begin
                if (D_test_index_q - 1'h1 <= 1'h0) begin
                    D_test_index_d = 1'h0;
                end else begin
                    D_test_index_d = D_test_index_q - 1'h1;
                end
                if (D_slow_clock_enable_q == 1'h0) begin
                    D_states_d = 3'h0;
                end else begin
                    if (D_slow_clock_enable_q == 1'h1) begin
                        D_states_d = 3'h1;
                    end
                end
            end
            3'h4: begin
                D_slow_clock_enable_d = 1'h0;
                D_states_d = 3'h0;
            end
        endcase
        current_inputs = INPUTS[D_test_index_q];
        M_alu_alufn = current_inputs[7'h45:7'h40];
        M_alu_a = current_inputs[6'h3f:6'h20];
        M_alu_b = current_inputs[5'h1f:1'h0];
        D_high_16_d = M_alu_out[5'h1f:5'h10];
        D_low_16_d = M_alu_out[4'hf:1'h0];
        if (io_dip[2'h2][3'h6]) begin
            current_output = ~M_alu_out;
            current_v = ~M_alu_v;
        end else begin
            current_output = M_alu_out;
            current_z = M_alu_z;
            current_v = M_alu_v;
            current_n = M_alu_n;
        end
        correct_answer = ANSWER[D_test_index_q];
        correct_z = correct_answer[2'h2];
        correct_v = correct_answer[1'h1];
        correct_n = correct_answer[1'h0];
        if ((correct_answer[6'h22:2'h3] == current_output) | (correct_v & current_v)) begin
            if ((current_inputs[7'h45:7'h40] == 6'h0) | (current_inputs[7'h45:7'h40] == 6'h1)) begin
                if ((correct_z == M_alu_z & correct_n == M_alu_n) | (correct_v == current_v)) begin
                    D_result_checker_d = 1'h1;
                    led[3'h6] = 1'h1;
                end else begin
                    D_result_checker_d = 1'h0;
                    led[3'h7] = 1'h1;
                end
            end else begin
                D_result_checker_d = 1'h1;
                led[3'h6] = 1'h1;
            end
        end else begin
            D_result_checker_d = 1'h0;
            led[3'h7] = 1'h1;
        end
        if (D_states_q == 3'h1) begin
            if (D_display_toggle_counter_q < 2'h2) begin
                io_led[1'h0] = D_low_16_q[3'h7:1'h0];
                io_led[1'h1] = D_low_16_q[4'hf:4'h8];
            end else begin
                if (D_display_toggle_counter_q < 3'h4) begin
                    io_led[1'h0] = D_high_16_q[3'h7:1'h0];
                    io_led[1'h1] = D_high_16_q[4'hf:4'h8];
                end
            end
        end else begin
            if (D_states_q == 3'h0) begin
                if (D_toggle_display_q == 1'h1 && D_states_q == 3'h0) begin
                    io_led[1'h0] = D_high_16_q[3'h7:1'h0];
                    io_led[1'h1] = D_high_16_q[4'hf:4'h8];
                end else begin
                    if (D_toggle_display_q == 1'h0 && D_states_q == 3'h0) begin
                        io_led[1'h0] = D_low_16_q[3'h7:1'h0];
                        io_led[1'h1] = D_low_16_q[4'hf:4'h8];
                    end
                end
            end
        end
        io_led[2'h2] = D_test_index_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_clock_counter_q <= 0;
            D_states_q <= 3'h0;
            D_slow_clock_enable_q <= 1'h0;
            D_test_index_q <= 1'h0;
            D_result_checker_q <= 1'h1;
            D_high_16_q <= 0;
            D_low_16_q <= 0;
            D_toggle_display_q <= 1'h0;
            D_display_toggle_counter_q <= 1'h0;
        end else begin
            D_clock_counter_q <= D_clock_counter_d;
            D_states_q <= D_states_d;
            D_slow_clock_enable_q <= D_slow_clock_enable_d;
            D_test_index_q <= D_test_index_d;
            D_result_checker_q <= D_result_checker_d;
            D_high_16_q <= D_high_16_d;
            D_low_16_q <= D_low_16_d;
            D_toggle_display_q <= D_toggle_display_d;
            D_display_toggle_counter_q <= D_display_toggle_counter_d;
        end
    end
endmodule